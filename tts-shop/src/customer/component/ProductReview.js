import React, { useState } from "react";
import "../styles/ProductReview.scss";

const ProductReview = () => {
  const [filter, setFilter] = useState("T·∫•t c·∫£");
  const [showAllReviews, setShowAllReviews] = useState(false);
  const [showModal, setShowModal] = useState(false); // üÜï Th√™m tr·∫°ng th√°i modal
  const [hoveredStar, setHoveredStar] = useState(0);
  const [selectedRating, setSelectedRating] = useState(0); // üÜï
  const reviews = [
    {
      name: "TƒÉng Qu·ªëc Anh",
      initials: "T",
      rating: 5,
      comment: "D·∫° cho em h·ªèi l√† b·∫£n ƒë√£ k√≠ch ho·∫°t th√¨ b·ªã l·ªói so v·ªõi ch∆∞a k√≠ch ho·∫°t k ·∫°",
      tags: ["Hi·ªáu nƒÉng Si√™u m·∫°nh m·∫Ω", "Th·ªùi l∆∞·ª£ng pin C·ª±c kh·ªßng", "Ch·∫•t l∆∞·ª£ng camera Ch·ª•p ƒë·∫πp, chuy√™n nghi·ªáp"],
      time: "6 th√°ng tr∆∞·ªõc",
    },
    {
      name: "Nhan",
      initials: "N",
      rating: 5,
      comment: "R·∫•t h√†i l√≤ng!",
      tags: [],
      time: "8 th√°ng tr∆∞·ªõc",
    },
    {
      name: "L√™ Ho√†ng",
      initials: "L",
      rating: 4,
      comment: "M√°y ƒë·∫πp, hi·ªáu nƒÉng ·ªïn ƒë·ªãnh nh∆∞ng h∆°i n√≥ng khi ch∆°i game l√¢u.",
      tags: ["Hi·ªáu nƒÉng ·ªïn", "Thi·∫øt k·∫ø ƒë·∫πp"],
      time: "3 th√°ng tr∆∞·ªõc",
    },
    {
      name: "Nguy·ªÖn Th·ªã Mai",
      initials: "M",
      rating: 3,
      comment: "Ch·∫•t l∆∞·ª£ng camera ch∆∞a ƒë√∫ng k·ª≥ v·ªçng, pin d√πng ƒë∆∞·ª£c 1 ng√†y.",
      tags: ["Camera trung b√¨nh", "Pin t·∫°m ·ªïn"],
      time: "2 th√°ng tr∆∞·ªõc",
    },
    {
      name: "Ph·∫°m VƒÉn B√¨nh",
      initials: "B",
      rating: 2,
      comment: "Mua v·ªÅ ƒë∆∞·ª£c 1 tu·∫ßn th√¨ m√°y b·ªã ƒë∆°, ph·∫£i mang b·∫£o h√†nh.",
      tags: ["Hi·ªáu nƒÉng k√©m", "L·ªói ph·∫ßn m·ªÅm"],
      time: "1 th√°ng tr∆∞·ªõc",
    },
  ];

  const totalReviews = reviews.length;
  const rating = totalReviews > 0 ? (reviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews).toFixed(1) : 0;
  const ratingCounts = [0, 0, 0, 0, 0];
  reviews.forEach((r) => {
    const idx = 5 - r.rating;
    if (idx >= 0 && idx < 5) ratingCounts[idx]++;
  });

  const getFilteredReviews = () => {
    switch (filter) {
      case "5 sao":
      case "4 sao":
      case "3 sao":
      case "2 sao":
      case "1 sao":
        return reviews.filter((r) => r.rating === parseInt(filter));
      default:
        return reviews;
    }
  };

  const filteredReviews = getFilteredReviews();
  const displayedReviews = showAllReviews ? filteredReviews : filteredReviews.slice(0, 2);

  return (
    <div className="product-review-container">
      <div className="review-summary-container">
        <h2 className="review-title">ƒê√°nh gi√° Samsung Galaxy S24 FE 5G 8GB 128GB</h2>
        <div className="review-box">
          <div className="left-review">
            <div className="main-rating-review">
              <span className="score">{rating}</span>
              <span className="out-of-review">/5</span>
            </div>
            <div className="stars-review">
              {'‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'.split('').map((s, i) => (
                <span key={i} className="star-review filled-review">‚òÖ</span>
              ))}
            </div>
            <p className="total-reviews">{totalReviews} l∆∞·ª£t ƒë√°nh gi√°</p>
            <button className="write-btn-review" onClick={() => setShowModal(true)}>Vi·∫øt ƒë√°nh gi√°</button>
          </div>

          <div className="center-review">
            <div className="bar-group-review">
              {[5, 4, 3, 2, 1].map((star, index) => (
                <div className="bar-row" key={star}>
                  <span className="bar-label">{star} <span style={{ color: "#fcd34d" }}>‚òÖ</span></span>
                  <div className="bar-track">
                    <div
                      className="bar-fill"
                      style={{ width: `${(ratingCounts[5 - star] / totalReviews) * 100}%` }}
                    ></div>
                  </div>
                  <span className="bar-count">{ratingCounts[5 - star]} ƒë√°nh gi√°</span>
                </div>
              ))}
            </div>
          </div>

          <div className="divider"></div>
        </div>
      </div>

      <div className="review-list-container">
        <div className="filter-header-review">
          <h3 className="filter-heading-review">L·ªçc ƒë√°nh gi√° theo</h3>
          <div className="filter-buttons-review">
            {['T·∫•t c·∫£', '5 sao', '4 sao', '3 sao', '2 sao', '1 sao'].map((label, i) => (
              <button
                key={i}
                className={`filter-btn ${filter === label ? 'active' : ''}`}
                onClick={() => {
                  setFilter(label);
                  setShowAllReviews(false);
                }}
              >
                {label}
              </button>
            ))}
          </div>
        </div>

        <div className="review-items-review">
          {displayedReviews.map((item, i) => (
            <div key={i} className="review-item-review">
              <div className="avatar">{item.initials}</div>
              <div className="content-review">
                <div className="top-row-review">
                  <span className="name-review">{item.name}</span>
                  <div className="stars-review">
                    {[...Array(5)].map((_, index) => (
                      <span key={index} className={`star-review ${index < item.rating ? 'filled-review' : ''}`}>‚òÖ</span>
                    ))}
                  </div>
                  <span className="label-review">
                    {item.rating === 5 ? 'Tuy·ªát v·ªùi' :
                      item.rating === 4 ? 'T·ªët' :
                        item.rating === 3 ? 'Trung b√¨nh' :
                          item.rating === 2 ? 'T·ªá' : 'R·∫•t t·ªá'}
                  </span>
                </div>
                {item.tags.length > 0 && (
                  <div className="tag-list-review">
                    {item.tags.map((tag, j) => (
                      <span key={j} className="tag-review">{tag}</span>
                    ))}
                  </div>
                )}
                <p className="comment-review">{item.comment}</p>
                <div className="time-review">
                  <i className="clock-icon-review">üïí</i> ƒê√°nh gi√° ƒë√£ ƒëƒÉng v√†o {item.time}
                </div>
              </div>
            </div>
          ))}
        </div>

        {!showAllReviews && filteredReviews.length > 2 && (
          <div className="see-more-review-wrapper">
            <button className="see-more-review-btn" onClick={() => setShowAllReviews(true)}>
              Xem t·∫•t c·∫£ ƒë√°nh gi√° ‚ûú
            </button>
          </div>
        )}
      </div>

      {/* üÜï Modal vi·∫øt ƒë√°nh gi√° */}
      {showModal && (
        <div className="review-modal-overlay">
          <div className="review-modal">
            <div className="modal-header">
              <h3>ƒê√°nh gi√° & nh·∫≠n x√©t</h3>
              <button className="close-modal" onClick={() => setShowModal(false)}>√ó</button>
            </div>
            <h4 className="modal-product-title">Samsung Galaxy S24 FE 5G 8GB 128GB</h4>

            <div className="modal-section">
              <p>ƒê√°nh gi√° chung</p>
            <div className="modal-stars-row">
  {["R·∫•t T·ªá", "T·ªá", "B√¨nh th∆∞·ªùng", "T·ªët", "Tuy·ªát v·ªùi"].map((label, i) => (
    <div
      key={i}
      className="modal-star-item"
      onMouseEnter={() => setHoveredStar(i + 1)}
      onMouseLeave={() => setHoveredStar(0)}
      onClick={() => setSelectedRating(i + 1)} // üÜï click ƒë·ªÉ ch·ªçn sao
    >
      <span className={`star ${
        hoveredStar >= i + 1 || selectedRating >= i + 1 ? 'yellow' : 'gray'
      }`}>‚òÖ</span>
      <span>{label}</span>
    </div>
  ))}
</div>


            </div>

          

            <textarea className="modal-textarea" placeholder="Xin m·ªùi chia s·∫ª m·ªôt s·ªë c·∫£m nh·∫≠n v·ªÅ s·∫£n ph·∫©m (nh·∫≠p t·ªëi thi·ªÉu 15 k√≠ t·ª±)" />
            <button className="submit-review-btn">G·ª¨I ƒê√ÅNH GI√Å</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductReview;
